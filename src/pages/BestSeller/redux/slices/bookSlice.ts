import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import bookAPI from 'apis/bookApi';
import { FETCH_BOOKS, FETCH_BOOK_REVIEWS } from 'pages/BestSeller/constant/redux';
import { BookState } from './type';

const initialState: BookState = {
  books: [],
  bookReviews: [],
  status: 'idle',
};

export const getBooksAsync = createAsyncThunk(FETCH_BOOKS, async () => {
  const response = await bookAPI.getListBestSellerBooks();
  return response?.books;
});
export const getReviewsAsync = createAsyncThunk(
  FETCH_BOOK_REVIEWS,
  async (title: string | null) => {
    const response = await bookAPI.getReviewsByTitle(title);
    return response;
  },
);

export const booksSlice = createSlice({
  name: 'books',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getBooksAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getBooksAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.books = action.payload;
      })
      .addCase(getBooksAsync.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(getReviewsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getReviewsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.bookReviews = action.payload;
      });
  },
});

export default booksSlice.reducer;
const { actions, reducer } = booksSlice;
export { actions as BookActions, reducer as BooksReducer };
