import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import bookAPI from '../../apis/bookApi';
import { BookType, ReviewType } from './type';

export interface BookState {
  books: BookType[];
  bookReview: ReviewType[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: BookState = {
  books: [],
  bookReview: [],
  status: 'idle',
};

export const getBooksAsync = createAsyncThunk('books/fetchBooks', async () => {
  const response = await bookAPI.getListBestSellerBooks();
  return response.books;
});
export const getReviewsAsync = createAsyncThunk(
  'books/fetchBookReviews',
  async (title: string | null) => {
    const response = await bookAPI.getReviewsByTitle(title);
    return response;
  }
);

export const booksSlice = createSlice({
  name: 'books',
  initialState,
  reducers: {
    // increment: (state) => {
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getBooksAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getBooksAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.books = action.payload;
      })
      .addCase(getBooksAsync.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(getReviewsAsync.fulfilled, (state, action) => {
        state.bookReview = action.payload;
      });
  },
  // extraReducers: {
  //   [getBooksAsync.fulfilled]: (state, action) => {
  //     state.items = action.payload;
  //     let num = action.payload.reduce(
  //       (a, c) => a + c.cartItem.price * c.unit,
  //       0
  //     );
  //     state.totalAmount = Number(num.toFixed(2));
  //   },
  //   [postOrderToDatabase.fulfilled]: (state, action) => {
  //     state.name = '';
  //     state.email = '';
  //     state.address = '';
  //     state.contact = '';
  //     state.postalCode = '';
  //     state.items = [];
  //     state.totalAmount = '';
  //   },
  // },
});

// export const { increment, decrement, getBooksAsync } = counterSlice.actions;

// export const selectCount = (state: RootState) => state.CounterReducer.value;

export default booksSlice.reducer;

const { actions, reducer } = booksSlice;
export { actions as BoosActions, reducer as BooksReducer };
